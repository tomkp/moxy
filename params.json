{"name":"Moxy","tagline":"Simple mocking / proxy server annotations for your integration tests ","google":"","body":"# Moxy\r\n\r\n  Moxy is for those times when you are __absolutely convinced__ that you need to run integration tests against a server.\r\n\r\n```java\r\n\r\n@RunWith(MoxyRunner.class)\r\npublic class MyTest {\r\n\r\n    @Test\r\n    @Moxy(response = \"hello world\")\r\n    public void example() throws Exception {\r\n\r\n        // opening http://locahost:9001 will return 'hello world'\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n  [Check out some more examples](https://github.com/tomkp/moxy#examples)\r\n\r\n## Usage\r\n\r\n  Annotate your test classes with ```@RunWith(MoxyRunner.class)```\r\n\r\n  Annotate your tests with ```@Moxy```\r\n\r\n## Configuration\r\n\r\n  You can configure the response body and headers.\r\n\r\n### response body\r\n\r\n  There are two ways of responding. You can either load the response from a file, or you can inline the response n the annotation.\r\n\r\n  - ```response``` this allows you to inline your response\r\n  - ```file``` the response body is loaded from a file (using either a relative or absolute path)\r\n\r\n### response headers\r\n\r\n  - ```contentType``` the content type, the default is```text/plain```\r\n  - ```statusCode``` the HTTP status code, the default is ```200```\r\n\r\n  Wherever multiple values can be given the following logic will be used:\r\n\r\n  - 0: use default value\r\n  - 1: always return this value\r\n  - x: a value for each request\r\n\r\n  eg:\r\n\r\n  ```@Moxy(statusCode = {500, 500, 200})``` - the first 2 requests get status code ```500```, the third request gets a ```200```\r\n\r\n  ```@Moxy(statusCode = 404)``` - all requests get a ```404```\r\n\r\n  ```@Moxy``` - all requests get the default status code ```200```\r\n\r\n\r\n\r\n## Why you shouldn't use Moxy\r\n\r\n  Before using Moxy you should ask yourself if it is truly necessary.\r\n\r\n  Can you refactor the code and mock out the dependency instead?\r\n\r\n  It might look like a unit test but it is not. Although the overhead of starting a server for *every* test is fairly low it's still going to run a lot slower than an actual unit test.\r\n\r\n  If you insist on using Moxy - then keep the tests to a minimum.\r\n\r\n\r\n## Examples\r\n\r\n  Mock server running on port 9001 returns ```hello world``` for all requests\r\n\r\n\r\n```java\r\n\r\n@RunWith(MoxyRunner.class)\r\npublic class Examples {\r\n\r\n    @Test\r\n    @Moxy(response = \"hello world\")\r\n    public void singleResponse() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001\");\r\n        assertEquals(\"hello world\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\nMultiple responses\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(response = {\"hello\", \"goodbye\"})\r\n    public void multipleResponses() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001\");\r\n        assertEquals(\"hello\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n        assertEquals(\"goodbye\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n    }\r\n\r\n ```\r\n\r\n\r\nJSON response\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(response = \"{\\\"id\\\": 1, \\\"mood\\\": \\\"Adventurous\\\"}\", contentType = \"application/json\")\r\n    public void staticResponse() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001\");\r\n        assertEquals(\"{\\\"id\\\": 1, \\\"mood\\\": \\\"Adventurous\\\"}\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n    }\r\n\r\n```\r\n\r\n\r\nJSON from a relative file\r\n\r\n\r\n```java\r\n\r\n\r\n    @Test\r\n    @Moxy(file = \"example.json\", contentType = \"application/json\")\r\n    public void fileResponse() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001\");\r\n        assertEquals(\"{\\\"id\\\": 1, \\\"mood\\\": \\\"Adventurous\\\"}\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n    }\r\n\r\n```\r\n\r\n\r\nXML from absolute files\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(file = {\"/scripts/example1.xml\", \"/scripts/example2.xml\"})\r\n    public void fileResponses() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001\");\r\n        assertEquals(\"<example>ONE</example>\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n        assertEquals(\"<example>TWO</example>\", Resources.toString(url, Charset.forName(\"UTF-8\")));\r\n    }\r\n\r\n```\r\n\r\n\r\nUse Moxy as a proxy\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(proxy = \"http://www.google.com\")\r\n    public void proxyToGoogle() throws Exception {\r\n        URL url = new URL(\"http://localhost:9001/robots.txt\");\r\n        String response = Resources.toString(url, Charset.forName(\"UTF-8\"));\r\n        assertTrue(response.startsWith(\"User-agent: *\"));\r\n    }\r\n\r\n```\r\n\r\n\r\nCapture response when proxying\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(proxy = \"http://www.google.com\", file = \"google_robots.txt\")\r\n    public void captureResponseFromGoogle() throws Exception {\r\n        URL resource = this.getClass().getResource(\".\");\r\n        File file = new File(resource.getPath(), \"google_robots.txt\");\r\n\r\n        Resources.toString(new URL(\"http://localhost:9001/robots.txt\"), Charset.forName(\"UTF-8\"));\r\n        assertTrue(Files.readFirstLine(file, Charset.forName(\"UTF-8\")).startsWith(\"User-agent: *\"));\r\n    }\r\n\r\n```\r\n\r\n\r\nCapture responses when proxying\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(proxy = \"http://www.google.com\", file = {\"google_robots.txt\", \"google_humans.txt\"})\r\n    public void captureResponsesFromGoogle() throws Exception {\r\n        URL resource = this.getClass().getResource(\".\");\r\n        File robotsFile = new File(resource.getPath(), \"google_robots.txt\");\r\n        File siteMapFile = new File(resource.getPath(), \"google_humans.txt\");\r\n\r\n        Resources.toString(new URL(\"http://localhost:9001/robots.txt\"), Charset.forName(\"UTF-8\"));\r\n        Resources.toString(new URL(\"http://localhost:9001/humans.txt\"), Charset.forName(\"UTF-8\"));\r\n        assertTrue(Files.readFirstLine(robotsFile, Charset.forName(\"UTF-8\")).startsWith(\"User-agent: *\"));\r\n        assertTrue(Files.readFirstLine(siteMapFile, Charset.forName(\"UTF-8\")).startsWith(\"Google is built\"));\r\n    }\r\n\r\n```\r\n\r\n\r\nMultiple content types;\r\n\r\n\r\n```java\r\n\r\n    @Test\r\n    @Moxy(contentType = {\"application/json\", \"text/xml\"})\r\n    public void multipleContentTypes() throws Exception {\r\n        HttpURLConnection connection;\r\n        URL url = new URL(\"http://localhost:9001\");\r\n\r\n        connection = (HttpURLConnection) (url.openConnection());\r\n        assertEquals(\"application/json\", connection.getContentType());\r\n\r\n        connection = (HttpURLConnection) (url.openConnection());\r\n        assertEquals(\"text/xml\", connection.getContentType());\r\n    }\r\n\r\n```\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}